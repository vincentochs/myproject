


install.packages("gapminder")
library(gapminder)
data("gapminder")

summary(gapminder)
x <- mean(gapminder$gdpPercap)
x


attach(gapminder)
mean(pop)
hist(lifeExp)
hist(pop)
hist(log(pop))
boxplot(lifeExp ~ continent)
plot(lifeExp ~ log(gdpPercap))

install.packages("dyplr")
library(dplyr)

gapminder %>%
  select (country,lifeExp) %>%
  filter(country == "South Africa" | 
           country =="Ireland") %>%
  group_by(country) %>%
  summarise(Average_life = mean(lifeExp))


df1 <- gapminder %>%
  select (country,lifeExp) %>%
  filter(country == "South Africa" | 
           country =="Ireland")
t.test(data=df1, lifeExp ~ country)


install.packages("ggplot2")
library(ggplot2)

gapminder %>%
  filter(gdpPercap < 5000) %>%
  ggplot(aes(x=log(gdpPercap), y=lifeExp, col=year, size=pop))+
  geom_point(alpha=0.3)
  geom_smooth(method = lm)
  facet_wrap(~ continent)
  
lm(lifeExp ~ gdpPercap)
summary(lm(lifeExp ~ gdpPercap+pop))




install.packages("RMySQL")
library(DBI) 

con <- dbConnect(RMySQL::MySQL(),
                 dbname = "xyz",
                 host = "abc",
                 port = 1234,
                 user = "Student",
                 password = "Password")


# or

library("sqldf")
sqldf("
      SELECT * FROM employees WHERE gender = 'm'
      ")

sqldf("
      SELECT firstnames, COUNT(firstname) as occurance FROM employees GROUP BY firstname
      ")


sqldf("
      SELECT *,
      CASE
      WHEN lower(firstname) = 'stewart' THEN 1
      WHEN lower(firstname) = 'jon' THEN 1
      WHEN lower(firstname) = 'solon' THEN 1
      ELSE 0
      END as friend
      FROM employees
      ORDER BY friend DESC, firstname
      ")






sqldf("
      SELECT *, (item_cost * quantity_ordered) as item_cost
      FROM orders a
      LEFT JOIN employees b ON a.id = b.id
      WHERE item_cost < 20
      ORDER BY item_cost
      ")

lower_than_average_cost <- sqldf("
                                 SELECT lastname, firstname, SUM(item_cost * quantity_ordered) as lunch_cost
                                 FROM orders a LEFT JOIN employees b ON a.id = b.id
                                 WHERE a.id != 'NA'
                                 GROUP BY a.id
                                 HAVING lunch_cost <(
SELECT SUM(item_cost * quantity_ordered) / COUNT(DISTINCT id) as avg_lunch_cost FROM orders WHERE id!='NA')

                                 
                                 ")

sqldf("SELECT SUM(item_cost * quantity_ordered) / COUNT(DISTINCT id) as avg_lunch_cost FROM orders WHERE id!='NA'
")
